// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PRISMA")
}

model User {
  id          String      @id @default(uuid())
  email       String      @unique
  name        String      @unique
  password    String
  role        Role        @default(USER)
  phoneNumber String      
  //collection of customize product
  customize   Customize[]
}

model Brand {
  id        String     @id @default(uuid())
  brandName String     @unique
  category  Category[]
  Image     Image?
}

model Category {
  id           String        @id @default(uuid())
  categoryName String        @unique
  brand        Brand         @relation(fields: [brandId], references: [id])
  brandId      String
  Image        Image?
  gpu          Gpu[]
  PowerSupply  PowerSupply[]
  Cpu          Cpu[]
  Ram          Ram[]
  Storage      Storage[]
  Case         Case[]
  MotherBoard  MotherBoard[]
}

model Gpu {
  id          String      @id @default(uuid())
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  model       String
  spec        String
  price       Float
  color       Color[]
  customize   Customize[]
  customizeId String      @unique
}

model PowerSupply {
  id          String      @id @default(uuid())
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  model       String
  spec        String
  price       Float
  color       Color[]
  customize   Customize[]
  customizeId String      @unique
  colorId     String
}

model Cpu {
  id          String        @id @default(uuid())
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  model       String
  spec        String
  price       Float
  type        String
  color       Color[]
  motherBoard MotherBoard[]
  customize   Customize[]
  customizeId String?       @unique
  colorId     String
}

model Ram {
  id          String        @id @default(uuid())
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  model       String
  spec        String
  price       Float
  color       Color[]
  type        String
  motherBoard MotherBoard[]
  customize   Customize[]
  customizeId String        @unique
  colorId     String
}

model Storage {
  id          String        @id @default(uuid())
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  model       String
  color       Color[]
  spec        String
  price       Float
  motherBoard MotherBoard[]
  customize   Customize[]
  customizeId String        @unique
  colorId     String
}

model Case {
  id          String        @id @default(uuid())
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  model       String
  color       Color[]
  spec        String
  price       Float
  motherBoard MotherBoard[]
  customize   Customize[]
  customizeId String        @unique
  colorId     String
}

model MotherBoard {
  id          String      @id @default(uuid())
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  model       String
  spec        String
  price       Float
  color       Color[]
  cpu         Cpu[]
  Ram         Ram[]
  storage     Storage[]
  case        Case[]
  customize   Customize[]
  customizeId String      @unique
}

enum Role {
  USER
  ADMIN
}

model Color {
  id            String       @id @default(uuid())
  color         String
  image         Image[]
  Gpu           Gpu?         @relation(fields: [gpuId], references: [id])
  gpuId         String?
  PowerSupply   PowerSupply? @relation(fields: [powerSupplyId], references: [id])
  powerSupplyId String?
  Cpu           Cpu?         @relation(fields: [cpuId], references: [id])
  cpuId         String?
  Ram           Ram?         @relation(fields: [ramId], references: [id])
  ramId         String?
  Storage       Storage?     @relation(fields: [storageId], references: [id])
  storageId     String?
  Case          Case?        @relation(fields: [caseId], references: [id])
  caseId        String?
  MotherBoard   MotherBoard? @relation(fields: [motherBoardId], references: [id])
  motherBoardId String?
}

model Image {
  id          String    @id @default(uuid())
  imageUrl    String
  color       Color?    @relation(fields: [colorId], references: [id])
  brand       Brand?    @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category    Category? @relation(fields: [categooryId], references: [id])
  categooryId String?   @unique
  colorId     String?
  brandId     String?   @unique
  partner     Partner?  @relation(fields: [partnerId], references: [id])
  partnerId   String    @unique
}

model Customize {
  id            String       @id @default(uuid())
  gpu           Gpu?         @relation(fields: [gpuId], references: [id])
  powerSupply   PowerSupply? @relation(fields: [powerSupplyId], references: [id])
  cpu           Cpu?         @relation(fields: [cpuId], references: [id])
  ram           Ram?         @relation(fields: [ramId], references: [id])
  storage       Storage?     @relation(fields: [storageId], references: [id])
  case          Case?        @relation(fields: [caseId], references: [id])
  motherBoard   MotherBoard? @relation(fields: [motherBoardId], references: [id])
  motherBoardId String?
  user          User         @relation(fields: [userId], references: [id])
  share         Boolean
  gpuId         String?
  powerSupplyId String?
  cpuId         String?
  ramId         String?
  storageId     String?
  caseId        String?
  userId        String
}

model Partner {
  id        String @id @default(uuid())
  storeName String @unique
  location  String
  webUrl    String
  logo      Image?
}
